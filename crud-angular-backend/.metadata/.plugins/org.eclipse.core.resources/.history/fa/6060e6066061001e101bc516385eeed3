package com.loiane.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.loiane.model.Course;
import com.loiane.repository.CourseRepository;
import com.loiane.service.CourseService;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;

@Validated
@RestController
@RequestMapping("/api/courses")

public class CourseController {
	
	private final CourseRepository courseRepository;
	private final CourseService courseService;
	
	public CourseController(CourseRepository courseRepository, CourseService courseService) {
		this.courseRepository = courseRepository;
		this.courseService = courseService;
	}

	@GetMapping
	public  @ResponseBody List<Course> list() {
		return this.courseService.list();
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<Course> findById(@PathVariable @NotNull @Positive Long id) {
		return this.courseService.findById(id)
				   .map(recordFound -> ResponseEntity.ok().body(recordFound))
				   .orElse(ResponseEntity.notFound().build());
	}
	
	@PostMapping
	@ResponseStatus(code = HttpStatus.CREATED)
	public Course create(@RequestBody @Valid Course  course) {
		System.out.println(course);
		return this.courseService.create(course);
	}
	
	@PutMapping("/{id}")
	public  ResponseEntity<Course>  update(@PathVariable @NotNull @Positive Long id, @RequestBody @Valid Course course) {
		return this.courseService.update(id, course)
				   .map(recordFound -> {
					   return ResponseEntity.ok().body(recordFound);
				   })
				   .orElse(ResponseEntity.notFound().build());
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<Void> delete(@PathVariable @NotNull @Positive Long id) {
		return this.courseRepository.findById(id)
				   .map(recordFound -> {
					   this.courseRepository.deleteById(id);
					   return ResponseEntity.noContent().<Void>build();
				   })
				   .orElse(ResponseEntity.notFound().build());
	}

}
